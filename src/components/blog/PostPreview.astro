---
import type { HTMLTag, Polymorphic } from "astro/types";
import type { CollectionEntry } from "astro:content";

import { getPostSortDate } from "@/data/post";

import FormattedDate from "../FormattedDate.astro";

type Props<Tag extends HTMLTag> = {
	post: CollectionEntry<"post">;
	withDesc?: boolean;
} & Polymorphic<{ as: Tag }>;

const { as: Tag = "div", post, withDesc = false } = Astro.props;
const postDate = getPostSortDate(post);
---

<Tag class="grid grid-cols-[120px,1fr] gap-4">
	<!-- Row 1: Date and Title -->
	<FormattedDate class="text-right text-gray-600 dark:text-gray-400" date={postDate} />
	<div>
		{post.data.draft && <span class="text-red-500">(Draft) </span>}
		<a class="cactus-link text-lg font-bold" data-astro-prefetch href={`/posts/${post.slug}/`}>
			{post.data.title}
		</a>
	</div>

	<!-- Row 2: Tags and Description -->
	<div class="text-right">
		{
			post.data.tags && post.data.tags.length > 0 && (
				<div class="flex flex-wrap justify-end gap-2">
					{post.data.tags.map((tag: string) => (
						<a
							href={`/tags/${tag}`}
							class="inline-flex items-center rounded-full bg-gray-100 px-2 py-1 text-xs font-medium text-gray-800 transition-colors hover:bg-gray-200 dark:bg-gray-700 dark:text-gray-300 dark:hover:bg-gray-600"
						>
							{tag}
						</a>
					))}
				</div>
			)
		}
	</div>
	<div>
		{
			withDesc && post.data.description && (
				<p class="line-clamp-3 italic text-gray-500 dark:text-gray-400">{post.data.description}</p>
			)
		}
	</div>
</Tag>
